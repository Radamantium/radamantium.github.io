/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./dev/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dev/js/main.js":
/*!************************!*\
  !*** ./dev/js/main.js ***!
  \************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_frame_sections_scrolling_frame_sections_scrolling_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/frame-sections-scrolling/frame-sections-scrolling.js */ \"./dev/modules/frame-sections-scrolling/frame-sections-scrolling.js\");\n/* harmony import */ var _modules_slider_slider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/slider/slider.js */ \"./dev/modules/slider/slider.js\");\n/* harmony import */ var _modules_alert_alert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/alert/alert.js */ \"./dev/modules/alert/alert.js\");\n\n\n\n\n\nObject(_modules_frame_sections_scrolling_frame_sections_scrolling_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('frame', 'content', {\n  scrollTime: 1,\n  parallaxed: [{\n    id: 'ice-keel__parallaxed',\n    parallaxRatio: 0.5\n  }, {\n    id: 'ice',\n    parallaxRatio: 0.5\n  }, {\n    id: 'scroll-down'\n  }],\n  scrollLinks: {\n    id: 'scroll-down',\n    sectionNum: 1\n  },\n  customUpdateFunctions: function customUpdateFunctions() {\n    var shownElem = document.getElementById('scroll-down');\n\n    if (content.style.transform == 'translateY(0px)') {\n      shownElem.style.opacity = 1;\n      shownElem.style.display = 'block';\n    } else {\n      shownElem.style.opacity = 0;\n      shownElem.style.display = 'none';\n    }\n  }\n});\nObject(_modules_slider_slider_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])('slider', {\n  scrollTime: 1,\n  currentSlide: 'last'\n});\nObject(_modules_alert_alert_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZXYvanMvbWFpbi5qcz85NGNmIl0sIm5hbWVzIjpbImZyYW1lU2VjdGlvbnNTY3JvbGxpbmciLCJzY3JvbGxUaW1lIiwicGFyYWxsYXhlZCIsImlkIiwicGFyYWxsYXhSYXRpbyIsInNjcm9sbExpbmtzIiwic2VjdGlvbk51bSIsImN1c3RvbVVwZGF0ZUZ1bmN0aW9ucyIsInNob3duRWxlbSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250ZW50Iiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJvcGFjaXR5IiwiZGlzcGxheSIsInNsaWRlciIsImN1cnJlbnRTbGlkZSIsImFsZXJ0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUVBQSw2R0FBc0IsQ0FDcEIsT0FEb0IsRUFFcEIsU0FGb0IsRUFHcEI7QUFDRUMsWUFBVSxFQUFFLENBRGQ7QUFFRUMsWUFBVSxFQUFFLENBQUM7QUFDWEMsTUFBRSxFQUFFLHNCQURPO0FBRVhDLGlCQUFhLEVBQUU7QUFGSixHQUFELEVBR1Y7QUFDQUQsTUFBRSxFQUFFLEtBREo7QUFFQUMsaUJBQWEsRUFBRTtBQUZmLEdBSFUsRUFNVjtBQUNBRCxNQUFFLEVBQUU7QUFESixHQU5VLENBRmQ7QUFXRUUsYUFBVyxFQUFFO0FBQ1hGLE1BQUUsRUFBRSxhQURPO0FBRVhHLGNBQVUsRUFBRTtBQUZELEdBWGY7QUFjRUMsdUJBQXFCLEVBQUUsaUNBQVc7QUFDaEMsUUFBSUMsU0FBUyxHQUFHQyxRQUFRLENBQUNDLGNBQVQsQ0FBd0IsYUFBeEIsQ0FBaEI7O0FBQ0EsUUFBSUMsT0FBTyxDQUFDQyxLQUFSLENBQWNDLFNBQWQsSUFBMkIsaUJBQS9CLEVBQWtEO0FBQ2hETCxlQUFTLENBQUNJLEtBQVYsQ0FBZ0JFLE9BQWhCLEdBQTBCLENBQTFCO0FBQ0FOLGVBQVMsQ0FBQ0ksS0FBVixDQUFnQkcsT0FBaEIsR0FBMEIsT0FBMUI7QUFDRCxLQUhELE1BR087QUFDTFAsZUFBUyxDQUFDSSxLQUFWLENBQWdCRSxPQUFoQixHQUEwQixDQUExQjtBQUNBTixlQUFTLENBQUNJLEtBQVYsQ0FBZ0JHLE9BQWhCLEdBQTBCLE1BQTFCO0FBQ0Q7QUFDRjtBQXZCSCxDQUhvQixDQUF0QjtBQThCQUMseUVBQU0sQ0FDSixRQURJLEVBRUo7QUFDRWYsWUFBVSxFQUFFLENBRGQ7QUFFRWdCLGNBQVksRUFBRTtBQUZoQixDQUZJLENBQU47QUFRQUMsdUVBQUsiLCJmaWxlIjoiLi9kZXYvanMvbWFpbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmltcG9ydCBmcmFtZVNlY3Rpb25zU2Nyb2xsaW5nIGZyb20gJy4uL21vZHVsZXMvZnJhbWUtc2VjdGlvbnMtc2Nyb2xsaW5nL2ZyYW1lLXNlY3Rpb25zLXNjcm9sbGluZy5qcyc7XHJcbmltcG9ydCBzbGlkZXIgZnJvbSAnLi4vbW9kdWxlcy9zbGlkZXIvc2xpZGVyLmpzJztcclxuaW1wb3J0IGFsZXJ0IGZyb20gJy4uL21vZHVsZXMvYWxlcnQvYWxlcnQuanMnO1xyXG5cclxuZnJhbWVTZWN0aW9uc1Njcm9sbGluZyhcclxuICAnZnJhbWUnLCBcclxuICAnY29udGVudCcsXHJcbiAge1xyXG4gICAgc2Nyb2xsVGltZTogMSxcclxuICAgIHBhcmFsbGF4ZWQ6IFt7XHJcbiAgICAgIGlkOiAnaWNlLWtlZWxfX3BhcmFsbGF4ZWQnLFxyXG4gICAgICBwYXJhbGxheFJhdGlvOiAwLjV9LFxyXG4gICAgICB7XHJcbiAgICAgIGlkOiAnaWNlJyxcclxuICAgICAgcGFyYWxsYXhSYXRpbzogMC41fSxcclxuICAgICAge1xyXG4gICAgICBpZDogJ3Njcm9sbC1kb3duJ31cclxuICAgICAgXSxcclxuICAgIHNjcm9sbExpbmtzOiB7XHJcbiAgICAgIGlkOiAnc2Nyb2xsLWRvd24nLFxyXG4gICAgICBzZWN0aW9uTnVtOiAxfSxcclxuICAgIGN1c3RvbVVwZGF0ZUZ1bmN0aW9uczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGxldCBzaG93bkVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2Nyb2xsLWRvd24nKTtcclxuICAgICAgaWYgKGNvbnRlbnQuc3R5bGUudHJhbnNmb3JtID09ICd0cmFuc2xhdGVZKDBweCknKSB7XHJcbiAgICAgICAgc2hvd25FbGVtLnN0eWxlLm9wYWNpdHkgPSAxO1xyXG4gICAgICAgIHNob3duRWxlbS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzaG93bkVsZW0uc3R5bGUub3BhY2l0eSA9IDA7XHJcbiAgICAgICAgc2hvd25FbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbik7XHJcblxyXG5zbGlkZXIoXHJcbiAgJ3NsaWRlcicsXHJcbiAge1xyXG4gICAgc2Nyb2xsVGltZTogMSxcclxuICAgIGN1cnJlbnRTbGlkZTogJ2xhc3QnXHJcbiAgfVxyXG4pO1xyXG5cclxuYWxlcnQoKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./dev/js/main.js\n");

/***/ }),

/***/ "./dev/modules/alert/alert.js":
/*!************************************!*\
  !*** ./dev/modules/alert/alert.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return alert; });\n\n\nfunction alert() {\n  var wavesNum = 4;\n  var alerts = document.getElementsByClassName('alert');\n\n  for (var i = 0; i < alerts.length; i++) {\n    generateHTMLContent(alerts[i]);\n  }\n\n  function generateHTMLContent(alertElement) {\n    for (var wave, _i = 0; _i < wavesNum; _i++) {\n      wave = document.createElement('div');\n      wave.classList.add('alert__wave');\n      alertElement.appendChild(wave);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kZXYvbW9kdWxlcy9hbGVydC9hbGVydC5qcz8yODhhIl0sIm5hbWVzIjpbImFsZXJ0Iiwid2F2ZXNOdW0iLCJhbGVydHMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJpIiwibGVuZ3RoIiwiZ2VuZXJhdGVIVE1MQ29udGVudCIsImFsZXJ0RWxlbWVudCIsIndhdmUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBYTs7QUFFRSxTQUFTQSxLQUFULEdBQWlCO0FBQzlCLE1BQU1DLFFBQVEsR0FBRyxDQUFqQjtBQUNBLE1BQUlDLE1BQU0sR0FBR0MsUUFBUSxDQUFDQyxzQkFBVCxDQUFnQyxPQUFoQyxDQUFiOztBQUVBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0gsTUFBTSxDQUFDSSxNQUEzQixFQUFtQ0QsQ0FBQyxFQUFwQyxFQUF3QztBQUN0Q0UsdUJBQW1CLENBQUNMLE1BQU0sQ0FBQ0csQ0FBRCxDQUFQLENBQW5CO0FBQ0Q7O0FBRUQsV0FBU0UsbUJBQVQsQ0FBNkJDLFlBQTdCLEVBQTJDO0FBQ3pDLFNBQUssSUFBSUMsSUFBSixFQUFVSixFQUFDLEdBQUcsQ0FBbkIsRUFBc0JBLEVBQUMsR0FBR0osUUFBMUIsRUFBb0NJLEVBQUMsRUFBckMsRUFBeUM7QUFDdkNJLFVBQUksR0FBR04sUUFBUSxDQUFDTyxhQUFULENBQXVCLEtBQXZCLENBQVA7QUFDQUQsVUFBSSxDQUFDRSxTQUFMLENBQWVDLEdBQWYsQ0FBbUIsYUFBbkI7QUFDQUosa0JBQVksQ0FBQ0ssV0FBYixDQUF5QkosSUFBekI7QUFDRDtBQUNGO0FBQ0YiLCJmaWxlIjoiLi9kZXYvbW9kdWxlcy9hbGVydC9hbGVydC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFsZXJ0KCkge1xyXG4gIGNvbnN0IHdhdmVzTnVtID0gNDtcclxuICBsZXQgYWxlcnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYWxlcnQnKTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGVydHMubGVuZ3RoOyBpKyspIHtcclxuICAgIGdlbmVyYXRlSFRNTENvbnRlbnQoYWxlcnRzW2ldKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRNTENvbnRlbnQoYWxlcnRFbGVtZW50KSB7XHJcbiAgICBmb3IgKGxldCB3YXZlLCBpID0gMDsgaSA8IHdhdmVzTnVtOyBpKyspIHtcclxuICAgICAgd2F2ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICB3YXZlLmNsYXNzTGlzdC5hZGQoJ2FsZXJ0X193YXZlJyk7XHJcbiAgICAgIGFsZXJ0RWxlbWVudC5hcHBlbmRDaGlsZCh3YXZlKTtcclxuICAgIH1cclxuICB9XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./dev/modules/alert/alert.js\n");

/***/ }),

/***/ "./dev/modules/frame-sections-scrolling/frame-sections-scrolling.js":
/*!**************************************************************************!*\
  !*** ./dev/modules/frame-sections-scrolling/frame-sections-scrolling.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return frameSectionsScrolling; });\n\n\nfunction frameSectionsScrolling(container_id, content_id) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  /* DEFAULT OPTIONS */\n  if (!('scrollTime' in options) || isNaN(options.scrollTime)) {\n    options.scrollTime = 1;\n  }\n\n  if (!('parallaxed' in options)) {\n    options.parallaxed = null;\n  }\n\n  if (!('scrollLinks' in options)) {\n    options.scrollLinks = [];\n  }\n\n  if (!('customUpdateFunctions' in options)) {\n    options.customUpdateFunctions = [];\n  }\n  /* BASE VARIABLES AND DEFENITIONS */\n\n\n  var container;\n  var content;\n  var sections;\n  var sectionsTops = [];\n  var displayedSectionNum = 0;\n  var currentContentTopPosition = 0;\n\n  try {\n    container = document.getElementById(container_id);\n    content = document.getElementById(content_id);\n    sections = content.getElementsByTagName('section');\n\n    if (container == null || content == null || !container.contains(content) || sections.length == 0) {\n      throw new Error('function frameSectionsScrolling: Некорреткные входные данные');\n    }\n  } catch (err) {\n    console.log(err.message);\n    return;\n  }\n\n  container.style.overflow = 'hidden';\n  container.style.position = 'relative';\n  content.style.transition = \"transform \".concat(options.scrollTime, \"s ease\");\n  /* PAGINATION */\n\n  generatePagination();\n\n  function generatePagination() {\n    var pagination = document.createElement('nav');\n    pagination.id = 'pagination';\n    pagination.classList.add('pagination');\n\n    for (var bullet, currentSectionTop = 0, i = 0; i < sections.length; i++) {\n      bullet = new Bullet(i, currentSectionTop, !i);\n      pagination.appendChild(bullet);\n      sectionsTops.push(currentSectionTop);\n      currentSectionTop += sections[i].offsetHeight;\n    }\n\n    pagination.style.top = '50%';\n    pagination.style.marginTop = -pagination.offsetHeight / 2 + 'px';\n    container.appendChild(pagination);\n\n    function Bullet(num, top, active) {\n      var bullet;\n      bullet = document.createElement('div');\n      bullet.classList.add('pagination__bullet');\n      bullet.dataset.num = num;\n      bullet.dataset.top = top;\n\n      if (active) {\n        bullet.classList.add('pagination__bullet_active');\n      }\n\n      bullet.addEventListener('click', scrollAndUpdateByLink.bind(bullet));\n      return bullet;\n    }\n  }\n  /* WHEEL SCROLLING */\n\n\n  {\n    var onWheel = function onWheel(e) {\n      e.preventDefault();\n      var wheelDelta = e.deltaY;\n      scrollAndUpdateByDelta(wheelDelta);\n    };\n\n    document.addEventListener('wheel', onWheel, {\n      passive: false\n    });\n  }\n  /* MOUSE POINTER SCROLLING */\n\n  content.onmousedown = function (e) {\n    e.preventDefault();\n    var mouseBeginY = e.pageY;\n    var mouseEndY;\n    var mouseDelta;\n\n    document.onmousemove = function (e) {\n      mouseEndY = e.pageY;\n    };\n\n    content.onmouseup = function (e) {\n      mouseDelta = mouseBeginY - mouseEndY;\n      scrollAndUpdateByDelta(mouseDelta);\n      document.onmousemove = null;\n      content.onmouseup = null;\n    };\n  };\n  /* TOUCH SCROLLING */\n\n\n  {\n    var contentTouchStart = function contentTouchStart(e) {\n      e.preventDefault();\n      var touches = e.changedTouches;\n      touchBeginY = touches[0].pageY;\n    };\n\n    var contentTouchMove = function contentTouchMove(e) {\n      var touches = e.changedTouches;\n      touchEndY = touches[0].pageY;\n    };\n\n    var contentTouchEnd = function contentTouchEnd(e) {\n      touchDelta = touchBeginY - touchEndY;\n      scrollAndUpdateByDelta(touchDelta);\n      touchDelta = 0;\n    };\n\n    content.addEventListener('touchstart', contentTouchStart, false);\n    content.addEventListener('touchmove', contentTouchMove, false);\n    content.addEventListener('touchend', contentTouchEnd, false);\n    content.addEventListener('touchcancel', contentTouchEnd, false);\n    var touchBeginY;\n    var touchEndY;\n    var touchDelta;\n    ;\n  }\n  /* CUSTOM SCROLL LINKS */\n\n  setScrollLinks();\n\n  function setScrollLinks() {\n    var links = options.scrollLinks;\n\n    if (Array.isArray(links)) {\n      for (var i = 0; i < links.length; i++) {\n        setScrollLinksItem(links[i]);\n      }\n    } else {\n      setScrollLinksItem(links);\n    }\n\n    function setScrollLinksItem(item) {\n      if ('id' in item && 'sectionNum' in item && item.sectionNum < sections.length && item.sectionNum >= 0) {\n        var link = document.getElementById(item.id);\n        if (link == null) return;\n        link.dataset.top = sectionsTops[item.sectionNum];\n        link.addEventListener('click', scrollAndUpdateByLink.bind(link));\n      }\n    }\n  }\n  /* PARALLAXED */\n\n\n  setParallaxed();\n  updateParallaxed();\n\n  function setParallaxed() {\n    var parallaxed = options.parallaxed;\n    if (parallaxed === null) return;\n\n    if (Array.isArray(parallaxed)) {\n      for (var i = 0; i < parallaxed.length; i++) {\n        var isSet = setParallaxedItem(parallaxed[i]);\n        if (!isSet) parallaxed.splice(i--, 1);\n      }\n    } else {\n      var _isSet = setParallaxedItem(parallaxed);\n\n      if (!_isSet) parallaxed = null;\n    }\n\n    function setParallaxedItem(item) {\n      if (!('id' in item) || !('parallaxRatio' in item)) return false;\n      var parallaxedElem = document.getElementById(item.id);\n      if (parallaxedElem == null) return false; // Element section number searching\n\n      var parallaxedElemSectionNum = -1;\n\n      for (var _i = 0; _i < sections.length; _i++) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = sections[_i].childNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var node = _step.value;\n\n            if (node.id == item.id) {\n              parallaxedElemSectionNum = _i;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      }\n\n      if (parallaxedElemSectionNum == -1) return false;\n      parallaxedElem.style.transition = \"transform \".concat(options.scrollTime, \"s ease\");\n      parallaxedElem.dataset.sectionNum = parallaxedElemSectionNum;\n      return true;\n    }\n  }\n\n  function updateParallaxed() {\n    var parallaxed = options.parallaxed;\n    if (parallaxed === null) return;\n\n    if (Array.isArray(parallaxed)) {\n      for (var i = 0; i < parallaxed.length; i++) {\n        updateParallaxedItem(parallaxed[i]);\n      }\n    } else {\n      updateParallaxedItem(parallaxed);\n    }\n\n    function updateParallaxedItem(item) {\n      var parallaxedElem = document.getElementById(item.id);\n      var parallaxedElemSectionNum = parallaxedElem.dataset.sectionNum;\n      var shift = parallaxedElem.offsetHeight * item.parallaxRatio;\n\n      if (parallaxedElemSectionNum == displayedSectionNum) {\n        parallaxedElem.style.transform = 'translateY(0)';\n      } else if (parallaxedElemSectionNum > displayedSectionNum) {\n        parallaxedElem.style.transform = \"translateY(\".concat(shift, \"px)\");\n      } else if (parallaxedElemSectionNum < displayedSectionNum) {\n        parallaxedElem.style.transform = \"translateY(-\".concat(shift, \"px)\");\n      }\n    }\n  }\n  /* SCROLL AND UPDATE FUNCTIONS */\n\n\n  function scrollAndUpdateByLink() {\n    var scrollTo = this.dataset.top;\n    scrollAndUpdate(scrollTo);\n  }\n\n  function scrollAndUpdateByDelta(delta) {\n    if (delta > 0 && displayedSectionNum < sections.length - 1) {\n      scrollTo = sectionsTops[displayedSectionNum + 1];\n      scrollAndUpdate(scrollTo);\n    } else if (delta < 0 && displayedSectionNum > 0) {\n      scrollTo = sectionsTops[displayedSectionNum - 1];\n      scrollAndUpdate(scrollTo);\n    }\n  }\n\n  function scrollAndUpdate(scrollTo) {\n    scroll(scrollTo);\n    updatePagination();\n    updateParallaxed();\n    updateCustomFunctions();\n  }\n\n  function scroll(scrollTo) {\n    content.style.transform = \"translateY(-\".concat(scrollTo, \"px)\");\n    currentContentTopPosition = scrollTo;\n    displayedSectionNum = sectionsTops.indexOf(+currentContentTopPosition);\n  }\n\n  function updatePagination() {\n    document.getElementsByClassName('pagination__bullet_active')[0].classList.toggle('pagination__bullet_active');\n    document.querySelector(\"[data-num=\\\"\".concat(displayedSectionNum, \"\\\"]\")).classList.add('pagination__bullet_active');\n  } //Custom update\n\n\n  function updateCustomFunctions() {\n    var custom = options.customUpdateFunctions;\n\n    if (Array.isArray(custom)) {\n      for (var i = 0; i < custom.length; i++) {\n        tryCustomUpdate(custom[i]);\n      }\n    } else {\n      tryCustomUpdate(custom);\n    }\n  }\n\n  function tryCustomUpdate(customUpdate) {\n    try {\n      customUpdate();\n    } catch (err) {\n      console.log(err.message);\n      return;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dev/modules/frame-sections-scrolling/frame-sections-scrolling.js\n");

/***/ }),

/***/ "./dev/modules/slider/slider.js":
/*!**************************************!*\
  !*** ./dev/modules/slider/slider.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return slider; });\n\n\nfunction slider(slider_id) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  /* DEFAULT OPTIONS */\n  if (!('scrollTime' in options) || isNaN(options.scrollTime)) {\n    options.scrollTime = 1;\n  }\n\n  if (!('currentSlide' in options)) {\n    options.currentSlide = 'last';\n  }\n\n  if (!('lineWidth' in options) || isNaN(options.lineWidth)) {\n    options.lineWidth = 640;\n  }\n  /* BASE VARIABLES AND DEFENITIONS */\n\n\n  var slider;\n  var slides;\n  var displayedSlideNum = 0;\n  var currentSliderLeftPosition = 0;\n  var slidesLeftPositions = [];\n  var sliderLineRanges = [];\n  var sliderCursorPosition;\n\n  try {\n    slider = document.getElementById(slider_id);\n    slides = slider.getElementsByClassName('slide');\n\n    if (slider == null || slides.length == 0) {\n      throw new Error('function slider: Некорреткные входные данные');\n    }\n\n    if (slides.length == 1) {\n      return;\n    }\n  } catch (err) {\n    console.log(err.message);\n    return;\n  }\n\n  slider.style.display = 'flex';\n  slider.style.transition = \"transform \".concat(options.scrollTime, \"s ease\");\n  slider.style.transform = 'translateX(0px)';\n\n  for (var i = 0; i < slides.length; i++) {\n    slides[i].style.flexShrink = '0';\n  }\n  /* SLIDER NAVIGATION */\n\n\n  var sliderNav;\n  var sliderLine;\n  var sliderProgress;\n  var sliderCursor;\n  var sliderCursorThumb;\n  var sliderPositions;\n  calcSliderLineRanges();\n  calcSlidesLeftPositions();\n  generateNavigation();\n  setSliderStartPosition();\n\n  function calcSliderLineRanges() {\n    var width = options.lineWidth;\n    var slidesNum = slides.length;\n    var step = width / (slidesNum - 1);\n\n    for (var left = 0, position = 0, rigth = step / 2, _i = 0; _i < slides.length; _i++) {\n      sliderLineRanges[_i] = {};\n      sliderLineRanges[_i].left = left;\n      sliderLineRanges[_i].position = position;\n      sliderLineRanges[_i].rigth = rigth;\n      left = rigth + 1;\n      position += step;\n      rigth = rigth + step < width ? rigth + step : position;\n    }\n  }\n\n  function calcSlidesLeftPositions() {\n    for (var _i2 = 0, leftPosition = 0; _i2 < slides.length; _i2++) {\n      slidesLeftPositions.push(leftPosition);\n      leftPosition += slides[_i2].offsetWidth;\n    }\n  }\n\n  function generateNavigation() {\n    sliderNav = document.createElement('div');\n    sliderNav.id = 'slider__nav';\n    sliderNav.classList.add('slider__nav');\n    sliderNav.style.transition = \"transform \".concat(options.scrollTime, \"s ease\");\n    generateSliderLine();\n    generateSliderProgress();\n    generateSliderCursorAndSliderCursorThumb();\n    generateSliderPositions();\n    slider.appendChild(sliderNav);\n\n    function generateSliderLine() {\n      sliderLine = document.createElement('div');\n      sliderLine.id = 'slider__line';\n      sliderLine.classList.add('slider__line');\n      sliderNav.appendChild(sliderLine);\n    }\n\n    function generateSliderProgress() {\n      sliderProgress = document.createElement('div');\n      sliderProgress.id = 'slider__progress';\n      sliderProgress.classList.add('slider__progress');\n      sliderProgress.style.transformOrigin = 'left center';\n      sliderNav.appendChild(sliderProgress);\n    }\n\n    function generateSliderCursorAndSliderCursorThumb() {\n      sliderCursor = document.createElement('div');\n      sliderCursor.id = 'slider__cursor';\n      sliderCursor.classList.add('slider__cursor');\n      sliderCursor.style.transform = 'translateX(0)';\n      sliderCursorThumb = document.createElement('div');\n      sliderCursorThumb.classList.add('slider__cursor-thumb');\n      sliderCursor.appendChild(sliderCursorThumb);\n      sliderNav.appendChild(sliderCursor);\n    }\n\n    function generateSliderPositions() {\n      sliderPositions = document.createElement('div');\n      sliderPositions.id = 'slider__positions';\n      sliderPositions.classList.add('slider__positions');\n\n      for (var positionLabel, slideLabel, _i3 = 0; _i3 < slides.length; _i3++) {\n        positionLabel = document.createElement('h4');\n        slideLabel = slides[_i3].getElementsByClassName('slide__label')[0];\n\n        if (slideLabel == undefined) {\n          positionLabel.innerHTML = '•';\n        } else {\n          positionLabel.innerHTML = slideLabel.innerHTML;\n        }\n\n        positionLabel.classList.add('slider__positions-item');\n        var labelWidth = options.lineWidth / slides.length;\n        var position = sliderLineRanges[_i3].position;\n        var shift = labelWidth / 2;\n        positionLabel.style.width = \"\".concat(labelWidth, \"px\");\n        positionLabel.style.left = \"\".concat(position - shift, \"px\");\n        sliderPositions.appendChild(positionLabel);\n      }\n\n      sliderNav.appendChild(sliderPositions);\n    }\n  }\n\n  function setSliderStartPosition() {\n    switch (options.currentSlide) {\n      case 'first':\n        sliderCursorPosition = 0;\n        displayedSlideNum = 0;\n        updateSlider();\n        break;\n\n      case 'last':\n        sliderCursorPosition = options.lineWidth;\n        displayedSlideNum = slides.length - 1;\n        updateSlider();\n        break;\n\n      default:\n        if (isNaN(options.currentSlide) || options.currentSlide < 0 || options.currentSlide >= slides.length) {\n          break;\n        }\n\n        sliderCursorPosition = sliderLineRanges[options.currentSlide].position;\n        displayedSlideNum = options.currentSlide;\n        updateSlider();\n        break;\n    }\n  }\n  /* MOUSE POINTER SCROLLING */\n\n\n  sliderCursor.onmousedown = function (e) {\n    e.stopPropagation();\n    e.preventDefault();\n    var mouseBeginX = e.pageX;\n    var mouseEndX;\n    var mouseDelta;\n\n    document.onmousemove = function (e) {\n      mouseEndX = e.pageX;\n      mouseDelta = mouseEndX - mouseBeginX;\n      mouseBeginX = mouseEndX;\n      updateSliderByCursorDelta(mouseDelta);\n    };\n\n    document.onmouseup = function (e) {\n      setSliderCursorAndProgressToDisplayedSlidePosition();\n      document.onmousemove = null;\n      document.onmouseup = null;\n    };\n  };\n  /* TOUCH SCROLLING */\n\n\n  {\n    var sliderCursorTouchStart = function sliderCursorTouchStart(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var touches = e.changedTouches;\n      touchBeginX = touches[0].pageX;\n    };\n\n    var sliderCursorTouchMove = function sliderCursorTouchMove(e) {\n      var touches = e.changedTouches;\n      touchEndX = touches[0].pageX;\n      touchDelta = touchEndX - touchBeginX;\n      touchBeginX = touchEndX;\n      updateSliderByCursorDelta(touchDelta);\n    };\n\n    var sliderCursorTouchEnd = function sliderCursorTouchEnd(e) {\n      e.stopPropagation();\n      setSliderCursorAndProgressToDisplayedSlidePosition();\n    };\n\n    sliderCursor.addEventListener('touchstart', sliderCursorTouchStart, false);\n    sliderCursor.addEventListener('touchmove', sliderCursorTouchMove, false);\n    sliderCursor.addEventListener('touchend', sliderCursorTouchEnd, false);\n    sliderCursor.addEventListener('touchcancel', sliderCursorTouchEnd, false);\n    var touchBeginX;\n    var touchEndX;\n    var touchDelta;\n    ;\n  }\n  /* SLIDER UPDATE FUNCTIONS */\n\n  function updateSliderByCursorDelta(delta) {\n    var newSliderCursorPosition = sliderCursorPosition + delta;\n\n    if (newSliderCursorPosition >= 0 && newSliderCursorPosition <= options.lineWidth) {\n      sliderCursorPosition = newSliderCursorPosition;\n      updateDisplayedSlideNum();\n      updateSlider();\n    }\n\n    function updateDisplayedSlideNum() {\n      for (var _i4 = 0; _i4 < slides.length; _i4++) {\n        if (sliderCursorPosition <= sliderLineRanges[_i4].rigth && sliderCursorPosition >= sliderLineRanges[_i4].left) {\n          displayedSlideNum = _i4;\n          break;\n        }\n      }\n    }\n  }\n\n  function setSliderCursorAndProgressToDisplayedSlidePosition() {\n    var from = sliderCursorPosition;\n    var to = sliderLineRanges[displayedSlideNum].position;\n    var delta = to - from;\n    animate({\n      duration: 500,\n      timing: makeEaseInOut(circ),\n      draw: function draw(progress) {\n        sliderCursorPosition = from + delta * progress;\n        updateSliderCursorDisplay();\n        updateSliderProgressDisplay();\n      }\n    });\n  }\n\n  function updateSlider() {\n    updateSliderCursorDisplay();\n    updateSliderProgressDisplay();\n    updateSlidesDisplay();\n  }\n\n  function updateSliderCursorDisplay() {\n    sliderCursor.style.transform = \"translateX(\".concat(sliderCursorPosition, \"px)\");\n  }\n\n  function updateSliderProgressDisplay() {\n    var scale = sliderCursorPosition / options.lineWidth;\n    sliderProgress.style.transform = \"scaleX(\".concat(scale, \")\");\n  }\n\n  function updateSlidesDisplay() {\n    var leftPosition = slidesLeftPositions[displayedSlideNum];\n    slider.style.transform = \"translateX(-\".concat(leftPosition, \"px)\");\n    sliderNav.style.transform = \"translateX(\".concat(leftPosition, \"px)\");\n  } // JS ANIMATION FUNCTOINS\n\n\n  function animate(options) {\n    var start = performance.now();\n    requestAnimationFrame(function animate(time) {\n      var timeFraction = (time - start) / options.duration;\n      if (timeFraction > 1) timeFraction = 1;\n      var progress = options.timing(timeFraction);\n      options.draw(progress);\n\n      if (timeFraction < 1) {\n        requestAnimationFrame(animate);\n      }\n    });\n  }\n\n  function makeEaseInOut(timing) {\n    return function (timeFraction) {\n      if (timeFraction < .5) {\n        return timing(2 * timeFraction) / 2;\n      } else {\n        return (2 - timing(2 * (1 - timeFraction))) / 2;\n      }\n    };\n  }\n\n  function circ(timeFraction) {\n    return 1 - Math.sin(Math.acos(timeFraction));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dev/modules/slider/slider.js\n");

/***/ })

/******/ });